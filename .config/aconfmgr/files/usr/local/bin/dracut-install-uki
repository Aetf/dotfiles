#!/usr/bin/env python
"""
Build and install unified kernel image
"""
from __future__ import print_function, division, absolute_import
import argparse
import glob
import os
import re
import sys
import subprocess as sp
from contextlib import contextmanager
from itertools import chain


ESP_MOUNTPOINT = '/efi'
DRACUT_CONF_DIR = '/etc/dracut.conf.d'


def msg(msg):
    print('==> {}'.format(msg), flush=True)


def msg2(msg):
    print('--> {}'.format(msg), flush=True)


def get_conf_lines(base, preset):
    conf_files = chain(
        glob.glob(os.path.join(DRACUT_CONF_DIR, base, '*.conf')),
        glob.glob(os.path.join(DRACUT_CONF_DIR, base, preset, '*.conf')),
    )
    for conf in conf_files:
        with open(conf) as f:
            for line in f:
                if line.startswith('#'):
                    continue
                line = line.strip()
                if line:
                    yield line


def get_cmdline(preset='normal'):
    cmdline = []

    for line in get_conf_lines('cmdline.d', preset):
        if line:
            cmdline.append(line)

    # normalize trailing/leading spaces as well as condense multiple spaces to one.
    return ' '.join(cmdline)


def get_install(preset='normal'):
    files = []
    for line in get_conf_lines('install.d', preset):
        files += gather_files(line)
    return files


def gather_files(path):
    files = []
    if os.path.isdir(path):
        for dirpath, dirnames, filenames in os.walk(path):
            for dirname in dirnames:
                files += gather_files(os.path.join(dirpath, dirname))
            files += [os.path.join(dirpath, filename) for filename in filenames]
    else:
        files += [path]
    return files


def call_dracut(*args, hostonly, cmdline, install_files, name_parts, kver):
    cmd = [
        'dracut',
        '-H' if hostonly else '-N',
        '--force',
        '--kernel-cmdline', cmdline,
    ]
    for ifile in install_files:
        cmd += [
            '--install', ifile,
        ]
    name = '-'.join(name_parts)
    cmd += [
        os.path.join(ESP_MOUNTPOINT, 'EFI/Linux', 'Arch-{}.efi'.format(name)),
        '--kver', kver,
    ]
    cmd += args
    return sp.check_call(cmd)


def gen(pkgbase_path, args):
    with open(os.path.join('/', pkgbase_path)) as f:
        pkgbase = f.read().strip()

    # pkgbase_path = "usr/lib/modules/linux-x.x.x/pkgbase"
    kver = os.path.basename(os.path.dirname(pkgbase_path))

    msg("Generating hostonly image for {} {}".format(pkgbase, kver))
    cmdline = get_cmdline('normal')
    msg2("Kernel command line: " + cmdline)
    call_dracut(
        *args.dracut_args,
        hostonly=True,
        cmdline=cmdline,
        install_files=get_install('normal'),
        name_parts=[pkgbase],
        kver=kver,
    )

    msg("Generating fallback image for {} {}".format(pkgbase, kver))
    cmdline = get_cmdline('fallback')
    msg2("Kernel command line: " + cmdline)
    call_dracut(
        *args.dracut_args,
        hostonly=False,
        cmdline=cmdline,
        install_files=get_install('fallback'),
        name_parts=[pkgbase, 'fallback'],
        kver=kver,
    )


@contextmanager
def mount_esp(mountpoint):
    msg("Mounting ESP partition at {}".format(mountpoint))
    sp.check_call(['mount-esp', mountpoint])
    try:
        yield
    finally:
        msg("Unmounting ESP partition at {}".format(mountpoint))
        sp.check_call(['umount', mountpoint])


def gather_pkgbase_lines(args):
    """Gather pkgbase file lines either from stdin or using current install kernel"""
    if args.hook:
        # generate for package installed kernel
        ptn = re.compile(r'usr/lib/modules/[^/]+/pkgbase')
        for line in sys.stdin:
            line = line.strip()
            if ptn.match(line):
                yield line
    else:
        # generate for currently installed kernel
        for pkgbase_path in glob.glob('/usr/lib/modules/*/pkgbase'):
            yield pkgbase_path


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--hook', action='store_true',
                        help='Run as packman hook, receiving changed files via stdin')
    parser.add_argument('dracut_args', metavar='DRACUT_ARGS', nargs=argparse.REMAINDER,
                        help='Additional arguments to pass to dracut')
    args = parser.parse_args()
    args.dracut_args = [arg for arg in args.dracut_args if arg != '--']

    with mount_esp(ESP_MOUNTPOINT):
        try:
            os.makedirs(os.path.join(ESP_MOUNTPOINT, 'EFI/Linux'))
        except FileExistsError:
            pass

        for line in gather_pkgbase_lines(args):
            gen(line, args)


if __name__ == '__main__':
    main()
